[agent]
  interval = "1s"
  round_interval = false
  metric_batch_size = 1 
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  precision = ""
  logfile = "/tmp/telegraf.log"
  debug = true
  quiet = false
  omit_hostname = true  

[global_tags]
  source = "opcua"  # Common tag for all metrics

[[inputs.opcua]]
  endpoint = "opc.tcp://127.0.0.1:62541/milo"
  connect_timeout = "30s"
  request_timeout = "30s"
  security_policy = "None"
  security_mode = "None"
  auth_method = "Anonymous"
  name_override = "opcua_metrics"  # Common measurement name for all metrics

  [[inputs.opcua.nodes]]
    name = "RandomInt32"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomInt32"
    default_tags = { source="opcua_dynamic", ns = "2" }

  [[inputs.opcua.nodes]]
    name = "RandomInt64"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomInt64"
    default_tags = {source="opcua_dynamic",  ns = "2"}

  [[inputs.opcua.nodes]]
    name = "RandomFloat"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomFloat"
    default_tags = { source="opcua_dynamic", ns = "2"}

  [[inputs.opcua.nodes]]
    name = "RandomDouble"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomDouble"
    default_tags = { source="opcua_dynamic", ns = "2"}

  [[inputs.opcua.nodes]]
    name = "ServerStatus_state"
    namespace = "0"
    identifier_type = "i"
    identifier = "2259"
    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_StartTime"
    namespace = "0"
    identifier_type = "i"
    identifier = "2257"
    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_CurrentTime"
    namespace = "0"
    identifier_type = "i"
    identifier = "2258"
    default_tags = { source="opcua_server", ns = "0" }

#  [[inputs.opcua.nodes]]
#    name = "ServerStatus_ServerViewCount"
#    namespace = "0"
#    identifier_type = "i"
#    identifier = "2276"
#    default_tags = { source="opcua_server", ns = "0" }
#
#
#  [[inputs.opcua.nodes]]
#    name = "ServerStatus_CurrentSessionCount"
#    namespace = "0"
#    identifier_type = "i"
#    identifier = "2277"
#    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_SoftwareVersion"
    namespace = "0"
    identifier_type = "i"
    identifier = "2264"
    default_tags = { source="opcua_server", ns = "0" }

[[processors.converter]]
  [processors.converter.tags]
    string = ["id"]

[[processors.override]]
  [processors.override.tags]
    id = ""  # Removing the 'id' tag

# Starlark processor to rename measurements based on source tag
[[processors.starlark]]
  source = '''
def apply(metric):
    if metric.tags["source"] == "opcua_server":
        metric.name = "opcua_server_metrics"
    return metric
'''

# Merge metrics into multifield metrics by series key
[[aggregators.merge]]
  drop_original = true
  tags = ["source"]  # Merge metrics with the common tag

[[outputs.influxdb_v2]]
  #urls = ["http://127.0.0.1:9000", "https://54.74.199.188:9000"]
  urls = ["https://54.74.199.188:9000"]
  token = "itoken"
  organization = "your_organization"
  bucket = "opcua_metrics"
  content_encoding = "identity"  # Ensuring no gzip encoding
  insecure_skip_verify = true


