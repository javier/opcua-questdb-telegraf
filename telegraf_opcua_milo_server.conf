[agent]
  interval = "1s"
  round_interval = false
  metric_batch_size = 1 
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  precision = ""
  logfile = "${TELEGRAF_LOG_FILE}"
  debug = true
  quiet = false
  omit_hostname = true  

[global_tags]
  source = "opcua"  # Common tag for all metrics

[[inputs.opcua]]
  endpoint = "${OPCUA_ENDPOINT:-opc.tcp://milo.digitalpetri.com:62541/milo}"
  connect_timeout = "30s"
  request_timeout = "30s"
  security_policy = "None"
  security_mode = "None"
  auth_method = "Anonymous"
  name_override = "${RANDOM_METRICS_TABLE_NAME:-opcua_metrics}"  # Common measurement name for all metrics

  [[inputs.opcua.nodes]]
    name = "RandomInt32"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomInt32"
    default_tags = { source="opcua_dynamic", ns = "2" }

  [[inputs.opcua.nodes]]
    name = "RandomInt64"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomInt64"
    default_tags = {source="opcua_dynamic",  ns = "2"}

  [[inputs.opcua.nodes]]
    name = "RandomFloat"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomFloat"
    default_tags = { source="opcua_dynamic", ns = "2"}

  [[inputs.opcua.nodes]]
    name = "RandomDouble"
    namespace = "2"
    identifier_type = "s"
    identifier = "Dynamic/RandomDouble"
    default_tags = { source="opcua_dynamic", ns = "2"}

  [[inputs.opcua.nodes]]
    name = "ServerStatus_state"
    namespace = "0"
    identifier_type = "i"
    identifier = "2259"
    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_StartTime"
    namespace = "0"
    identifier_type = "i"
    identifier = "2257"
    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_CurrentTime"
    namespace = "0"
    identifier_type = "i"
    identifier = "2258"
    default_tags = { source="opcua_server", ns = "0" }

# These metrics require extra access level at the OPCUA server. If uncommented you need to configure login. Refer to the Milo server and the telegraf OPCUA plugin for details
#  [[inputs.opcua.nodes]]
#    name = "ServerStatus_ServerViewCount"
#    namespace = "0"
#    identifier_type = "i"
#    identifier = "2276"
#    default_tags = { source="opcua_server", ns = "0" }
#
#
#  [[inputs.opcua.nodes]]
#    name = "ServerStatus_CurrentSessionCount"
#    namespace = "0"
#    identifier_type = "i"
#    identifier = "2277"
#    default_tags = { source="opcua_server", ns = "0" }

  [[inputs.opcua.nodes]]
    name = "ServerStatus_SoftwareVersion"
    namespace = "0"
    identifier_type = "i"
    identifier = "2264"
    default_tags = { source="opcua_server", ns = "0" }

# just an example of processing. We will be discarding the `id` tag later, but showing how you could convert from tags to fields
[[processors.converter]]
  [processors.converter.tags]
    string = ["id"]

# we remove the id tag, so later on we will be able to aggregate multiple rows into one, as long as the timestamp and rest of tags match
[[processors.override]]
  [processors.override.tags]
    id = ""  # Removing the 'id' tag

# we want to send all the metrics with the source tag opcua_server to a separate table
# Starlark processor to rename measurements based on source tag
[[processors.starlark]]
  source = '''
def apply(metric):
    if metric.tags["source"] == "opcua_server":
        metric.name = "${SERVER_METRICS_TABLE_NAME:-opcua_server_metrics}"
    return metric
'''

# Merge metrics into multifield metrics by series key. All the metrics with the same timestamp, metric (table) name and identical source tag will be merged as a single row, so we go from sparse to dense tables
[[aggregators.merge]]
  drop_original = true
  tags = ["source"]  # Merge metrics with the common tag

[[outputs.influxdb_v2]]
  urls = ["${QUESTDB_HTTP_ENDPOINT:-http://127.0.0.1:9000}"]
  token = "${QUESTDB_HTTP_TOKEN}"
  content_encoding = "identity"  # Important to ensuring no gzip encoding
  # This is in case you are self-managing QuestDB under TLS with a self-signed certificate 
  insecure_skip_verify = ${QUESTDB_SKIP_TLS_VERIFICATION:-true}   


